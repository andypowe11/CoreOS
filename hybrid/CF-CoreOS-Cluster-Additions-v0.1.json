{ "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "A hybrid cluster - additional AWS CoreOS nodes to add to existing Swarm cluster running in vCloud Director",

  "Mappings" : {
    "VpcCidrs" : {
      "eu-central-1" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.0/24", "pubsubnet2" : "10.203.1.0/24", "pubsubnet3" : "10.203.2.0/24" },
      "eu-west-1" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.0/24", "pubsubnet2" : "10.203.1.0/24", "pubsubnet3" : "10.203.2.0/24" },
      "us-east-1" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.0/24", "pubsubnet2" : "10.203.1.0/24", "pubsubnet3" : "10.203.2.0/24" },
      "us-west-1" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.0/24", "pubsubnet2" : "10.203.1.0/24", "pubsubnet3" : "10.203.2.0/24" },
      "us-west-2" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.0/24", "pubsubnet2" : "10.203.1.0/24", "pubsubnet3" : "10.203.2.0/24" }
    },

    "RegionMap" : {
      "eu-central-1" : { "AMI" : "ami-fdd4c791" },
      "eu-west-1" : { "AMI" : "ami-55d20b26" },
      "us-east-1" : { "AMI" : "ami-37bdc15d" },
      "us-west-2" : { "AMI" : "ami-00ebfc61" },
      "us-west-1" : { "AMI" : "ami-27553a47" }
    }
  },

  "Parameters" : {
    "InstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
        "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.micro"
    },

    "ClusterSize" : {
      "Type" : "Number",
      "Default" : "3",
      "MinValue" : "3",
      "MaxValue" : "12",
      "Description" : "Number of nodes to be added to the CoreOS cluster (3-12)."
    },

    "DiscoveryURL" : {
      "Type" : "String",
      "Description" : "The unique etcd cluster discovery URL used to build the vCloud Director cluster",
      "Default" : ""
    },

    "AdvertisedIPAddress" : {
      "Type" : "String",
      "Description" : "Use 'private' if your etcd cluster is within one region or 'public' if it spans regions or cloud providers.",
      "AllowedValues" : ["private", "public"],
      "Default" : "private"
    },

    "AllowSSHFrom" : {
      "Type" : "String",
      "Description" : "The net block (CIDR) that SSH and docker are available to (default is Eduserv BRM).",
      "Default" : "188.92.143.3/32"
    },

    "KeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the instance.",
      "Default" : ""
    },

    "VpcAvailabilityZones" : {
      "Type" : "CommaDelimitedList",
      "Description" : "Comma-delimited list of three VPC availability zones in which to create subnets",
      "Default" : "eu-west-1a,eu-west-1b,eu-west-1c"
    },

    "VCloudDirectorGatewayIp" : {
      "Type" : "String",
      "Description" : "IP address of the vCloud Director end of the VPN",
      "Default" : "5.198.141.19"
    },

    "VCloudDirectorSubnet" : {
      "Type" : "String",
      "Description" : "The net block (CIDR) of nodes in vCloud Director",
      "Default" : "192.168.3.0/24"
    },

    "SwarmMasterIp" : {
      "Type" : "String",
      "Description" : "Swarm master node IP address in vCloud Director",
      "Default" : "192.168.3.2"
    }
  },

  "Resources" : {
    "Vpc" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "vpc" ] },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Vpc"] ] } }
        ]
      }
    },

    "PubSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet1" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet1"] ] } }
        ]
      }
    },

    "PubSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet2" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet2"] ] } }
        ]
      }
    },

    "PubSubnetAz3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet3" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet3"] ] } }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
        ]
      }
    },

    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteViaIgw" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc"}
      }
    },

    "PublicRouteViaIgw" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaIgw" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PubSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz1" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz2" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet3RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz3" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "VpnGateway" : {
      "Type" : "AWS::EC2::VPNGateway",
      "Properties" : {
        "Type" : "ipsec.1",
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName"}, "VpnGateway"]]} }
        ]
      }
    },

    "VpnGatewayAttach": {
      "DependsOn" : [ "Vpc", "VpnGateway" ],
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpnGatewayId" : { "Ref" : "VpnGateway" },
        "VpcId" : { "Ref" : "Vpc" }
      }
    },

    "VCloudDirectorGateway" : {
      "Type" : "AWS::EC2::CustomerGateway",
      "Properties" : {
        "Type" : "ipsec.1",
        "IpAddress" : { "Ref" : "VCloudDirectorGatewayIp" },
        "BgpAsn" : "64000",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName"}, "VCloudDirectorGateway"]]} }
        ]
      }
    },

    "VpnConnection" : {
      "Type" : "AWS::EC2::VPNConnection",
      "Properties" : {
        "Type" : "ipsec.1",
        "StaticRoutesOnly" : "true",
        "CustomerGatewayId" : { "Ref" : "VCloudDirectorGateway" },
        "VpnGatewayId" : { "Ref" : "VpnGateway"},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName"}, "VpnConnection"]]} }
        ]
      }
    },

    "VpnConnectionRoute" : {
      "Type" : "AWS::EC2::VPNConnectionRoute",
      "Properties" : {
        "VpnConnectionId" : { "Ref" : "VpnConnection"},
        "DestinationCidrBlock" : { "Ref" : "VCloudDirectorSubnet" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName"}, "VpnConnectionRoute"]]} }
        ]
      }
    },

    "RouteViaVpn" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc"}
      }
    },

    "PrivateSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz1" },
        "RouteTableId" : { "Ref" : "RouteViaVpn" }
      }
    },

    "PrivateSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz2" },
        "RouteTableId" : { "Ref" : "RouteViaVpn" }
      }
    },

    "PrivateSubnet3RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz3" },
        "RouteTableId" : { "Ref" : "RouteViaVpn" }
      }
    },

    "PrivateRouteViaVpn" : {
      "DependsOn" : "VpnGateway",
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaVpn" },
        "DestinationCidrBlock" : { "Ref" : "VCloudDirectorSubnet" },
        "GatewayId" : { "Ref" : "VpnGateway" }
      }
    },

    "NodeCoreOSSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Node CoreOS SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "AllowSSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "4243", "ToPort" : "4243", "CidrIp" : { "Ref" : "VCloudDirectorSubnet" } },
          { "IpProtocol" : "tcp", "FromPort" : "4001", "ToPort" : "4001", "CidrIp" : { "Ref" : "VCloudDirectorSubnet" } },
          { "IpProtocol" : "tcp", "FromPort" : "3379", "ToPort" : "3379", "CidrIp" : { "Ref" : "VCloudDirectorSubnet" } },
          { "IpProtocol" : "tcp", "FromPort" : "2380", "ToPort" : "2380", "CidrIp" : { "Ref" : "VCloudDirectorSubnet" } }
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref": "AWS::StackName"}, "Node-SG" ] ] } }
        ]
      }
    },

    "NodeIngress4243" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4243",
        "ToPort" : "4243",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "NodeIngress4001" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4001",
        "ToPort" : "4001",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "NodeIngress2379" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2379",
        "ToPort" : "2379",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "NodeIngress2380" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2380",
        "ToPort" : "2380",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "CoreOSServerAsg" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "CoreOSServerLc" },
        "MinSize" : "3",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "ClusterSize"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node" ] ] }, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "CoreOSServerLc" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "InstanceType"},
        "AssociatePublicIpAddress" : true,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "NodeCoreOSSecurityGroup"} ],
        "UserData" : { "Fn::Base64" :
          { "Fn::Join" : [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  etcd2:\n",
            "    discovery: ", { "Ref" : "DiscoveryURL" }, "\n",
            "    advertise-client-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2379\n",
            "    initial-advertise-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2380\n",
            "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n",
            "    listen-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2380\n",
            "  units:\n",
            "    - name: docker-tcp.socket\n",
            "      command: start\n",
            "      enable: true\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Docker Socket for the API\n\n",
            "        [Socket]\n",
            "        ListenStream=4243\n",
            "        BindIPv6Only=both\n",
            "        Service=docker.service\n\n",
            "        [Install]\n",
            "        WantedBy=sockets.target\n",
            "    - name: etcd2.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n",
            "    - name: docker-swarm.service\n",
            "      command: start\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Swarm service\n",
            "        After=docker.service\n\n",
            "        [Service]\n",
            "        Restart=on-failure\n",
            "        ExecStartPre=-/usr/bin/docker ps -q -f status=exited | xargs /usr/bin/docker rm\n",
            "        ExecStart=/usr/bin/docker run --name docker-swarm -d swarm join --addr=$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:4243 etcd://", { "Ref" : "SwarmMasterIp" }, ":2379/swarm\n"
            ] ]
          }
        }
      }
    }
  },

  "Outputs" : {
CustomerGatewayConfiguration
  }
}
